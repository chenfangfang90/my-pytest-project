{"name": "测试数据：【 0，True，0，获取成功】", "status": "failed", "statusDetails": {"message": "AssertionError: 返回消息不包含预期内容\nassert '获取成功' in ''\n +  where '' = <core.result_base.ResultBase object at 0x10658b7c0>.msg", "trace": "self = <test_get_car_check_project_list.TestGetCarCheckProjectList object at 0x10658e8b0>, project_type = '0', except_result = True, except_code = 0\nexcept_msg = '获取成功'\n\n    @allure.story('用例--获取验车项目列表')\n    @allure.description(\"\"\"\n    该用例是针对验车项目列表测试\n    验车项目类型：不填或为空查全部,\n    0.手动输入,\n    1.车辆外观,\n    2.车辆内饰和随车物品,\n    3.车辆性能,\n    4.增值小物件;\n    多个可以用,隔开(例：1,2,3)\n    \"\"\")\n    @allure.title('测试数据：【 {project_type}，{except_result}，{except_code}，{except_msg}】')\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"project_type, except_result, except_code, except_msg\",\n                             api_data[\"test_get_car_check_project_list\"])\n    def test_get_car_check_project_list(self, project_type, except_result, except_code, except_msg):\n        logger.info('##################### 开始执行用例 #################')\n    \n        # 执行接口调用\n        with allure.step(\"调用接口获取验车项目列表\"):\n            result = get_check_project_list(project_type)\n            step_1(project_type)  # 嵌套步骤\n    \n            # 附加响应结果到Allure报告\n            allure.attach(\n                name=\"接口响应结果\",\n                body=str(result.response.json()),\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            logger.debug(\"接口响应内容：{}\".format(result.response.text))\n    \n        # 添加断言步骤\n        with allure.step(\"验证接口响应\"):\n            assert result.success == except_result, f\"实际结果与预期不符: {result.error}\"\n            assert result.response.status_code == 200, \"HTTP状态码异常\"\n    \n            # 附加详细断言信息\n            actual_code = result.response.json().get(\"code\")\n            allure.attach(\n                f\"预期状态码: {except_code}\\n实际状态码: {actual_code}\",\n                name=\"状态码验证\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            assert actual_code == except_code, \"状态码不匹配\"\n    \n            # 如果有消息验证可以取消注释\n            allure.attach(\n                f\"预期消息: {except_msg}\\n实际消息: {result.msg}\",\n                name=\"消息验证\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           assert except_msg in result.msg, \"返回消息不包含预期内容\"\nE           AssertionError: 返回消息不包含预期内容\nE           assert '获取成功' in ''\nE            +  where '' = <core.result_base.ResultBase object at 0x10658b7c0>.msg\n\ntestcases/test_get_car_check_project_list.py:72: AssertionError"}, "description": "\n    该用例是针对验车项目列表测试 \n    验车项目类型：不填或为空查全部, \n    0.手动输入,\n    1.车辆外观,\n    2.车辆内饰和随车物品,\n    3.车辆性能,\n    4.增值小物件; \n    多个可以用,隔开(例：1,2,3)\n    ", "steps": [{"name": "调用接口获取验车项目列表", "status": "passed", "steps": [{"name": "步骤1===>> 获取验车数据，验车类型='0'", "status": "passed", "parameters": [{"name": "project_type", "value": "'0'"}], "start": 1743044299673, "stop": 1743044299673}], "attachments": [{"name": "接口响应结果", "source": "e1c24280-91cc-4258-bc36-224a430973a8-attachment.json", "type": "application/json"}], "start": 1743044299475, "stop": 1743044299681}, {"name": "验证接口响应", "status": "failed", "statusDetails": {"message": "AssertionError: 返回消息不包含预期内容\nassert '获取成功' in ''\n +  where '' = <core.result_base.ResultBase object at 0x10658b7c0>.msg\n", "trace": "  File \"/Users/yangfeng/Desktop/pytest/test-demo/testcases/test_get_car_check_project_list.py\", line 72, in test_get_car_check_project_list\n    assert except_msg in result.msg, \"返回消息不包含预期内容\"\n"}, "attachments": [{"name": "状态码验证", "source": "70719b47-34ff-4884-b0ec-80181fe49d50-attachment.txt", "type": "text/plain"}, {"name": "消息验证", "source": "acbd4838-f228-4e05-82de-4e2349f09f3c-attachment.txt", "type": "text/plain"}], "start": 1743044299681, "stop": 1743044299682}], "attachments": [{"name": "log", "source": "84b612a3-e197-404c-a3b4-90dd35909973-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "project_type", "value": "'0'"}, {"name": "except_result", "value": "True"}, {"name": "except_code", "value": "0"}, {"name": "except_msg", "value": "'获取成功'"}], "start": 1743044299475, "stop": 1743044299682, "uuid": "88446b16-98d6-43b7-8f30-bf8746d6c2e2", "historyId": "a9e90e177412af8be8ef5c341ef17546", "testCaseId": "87b0d5ce3aef7b6c40b6b25b4bdf3daf", "fullName": "testcases.test_get_car_check_project_list.TestGetCarCheckProjectList#test_get_car_check_project_list", "labels": [{"name": "severity", "value": "normal"}, {"name": "story", "value": "用例--获取验车项目列表"}, {"name": "feature", "value": "获取验车项目列表"}, {"name": "epic", "value": "针对单个接口测试"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_get_car_check_project_list"}, {"name": "subSuite", "value": "TestGetCarCheckProjectList"}, {"name": "host", "value": "yangfengs-MacBook-Pro.local"}, {"name": "thread", "value": "24591-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_get_car_check_project_list"}]}