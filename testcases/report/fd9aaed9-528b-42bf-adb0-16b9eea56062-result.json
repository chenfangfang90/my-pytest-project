{"name": "测试数据：【 0，True，0，获取成功】", "status": "failed", "statusDetails": {"message": "AssertionError: assert '获取成功' in ''\n +  where '' = <core.result_base.ResultBase object at 0x10289aa00>.msg", "trace": "self = <test_get_car_check_project_list.TestGetCarCheckProjectList object at 0x10289a130>\nproject_type = '0', except_result = True, except_code = 0, except_msg = '获取成功'\n\n    @allure.story('用例--获取验车项目列表')\n    @allure.description('该用例是针对验车项目列表测试')\n    @allure.title('测试数据：【 {project_type}，{except_result}，{except_code}，{except_msg}】')\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"project_type, except_result, except_code, except_msg\",\n                             api_data[\"test_get_car_check_project_list\"])\n    def test_get_car_check_project_list(self, project_type, except_result, except_code, except_msg):\n        logger.info('##################### 开始执行用例 #################')\n        result = test_get_check_project_list(project_type)\n        step_1(project_type)\n        assert result.success == except_result, result.error\n        assert result.response.status_code == 200\n        assert result.success == except_result, result.error\n        logger.info(\"code ==>> 期望结果：{}， 实际结果：【 {} 】\".format(except_code, result.response.json().get(\"code\")))\n        assert result.response.json().get(\"code\") == except_code\n>       assert except_msg in result.msg\nE       AssertionError: assert '获取成功' in ''\nE        +  where '' = <core.result_base.ResultBase object at 0x10289aa00>.msg\n\ntest_get_car_check_project_list.py:32: AssertionError"}, "description": "该用例是针对验车项目列表测试", "steps": [{"name": "步骤1===>> 获取验车数据", "status": "passed", "parameters": [{"name": "project_type", "value": "'0'"}], "start": 1743035791558, "stop": 1743035791559}], "attachments": [{"name": "log", "source": "6e01f29b-0150-45ed-97fe-7ea354e1f638-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "cdd10f66-f044-4c44-9e3f-1fe254f26865-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "project_type", "value": "'0'"}, {"name": "except_result", "value": "True"}, {"name": "except_code", "value": "0"}, {"name": "except_msg", "value": "'获取成功'"}], "start": 1743035791341, "stop": 1743035791559, "uuid": "75279c39-579f-4a06-8d3f-0b3bfea088d1", "historyId": "a9e90e177412af8be8ef5c341ef17546", "testCaseId": "87b0d5ce3aef7b6c40b6b25b4bdf3daf", "fullName": "testcases.test_get_car_check_project_list.TestGetCarCheckProjectList#test_get_car_check_project_list", "labels": [{"name": "epic", "value": "针对单个接口测试"}, {"name": "story", "value": "用例--获取验车项目列表"}, {"name": "feature", "value": "获取验车项目列表"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_get_car_check_project_list"}, {"name": "subSuite", "value": "TestGetCarCheckProjectList"}, {"name": "host", "value": "yangfengs-MacBook-Pro.local"}, {"name": "thread", "value": "13714-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_get_car_check_project_list"}]}